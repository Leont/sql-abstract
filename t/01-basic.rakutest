use Test;
use SQL::Abstract;

my $abstract = SQL::Abstract.new(:placeholders(SQL::Abstract::Placeholders::Postgres));

my $select-simple1 = $abstract.select('foo');
is-deeply $select-simple1, ('SELECT * FROM foo', []);

my $select-simple2 = $abstract.select('foo', <bar baz>);
is-deeply $select-simple2, ('SELECT bar, baz FROM foo', []);

my $select-simple3 = $abstract.select('foo', <bar baz>, { :1foo });
is-deeply $select-simple3, ('SELECT bar, baz FROM foo WHERE foo = $1', [1]);

my $select-simple4 = $abstract.select('foo', <bar baz>, { :foo(Any) });
is-deeply $select-simple4, ('SELECT bar, baz FROM foo WHERE foo IS NULL', []);

my $select-simple5 = $abstract.select('foo', <bar baz>, { :foo(:isnull) });
is-deeply $select-simple5, ('SELECT bar, baz FROM foo WHERE foo IS NULL', []);

my $select-simple6 = $abstract.select('foo', <bar baz>, { :foo('<' => 3) });
is-deeply $select-simple6, ('SELECT bar, baz FROM foo WHERE foo < $1', [3]);

my $select-simple7 = $abstract.select('foo', <bar baz>, { :foo{ '<' => 3, '>' => 0 } });
is-deeply $select-simple7, ('SELECT bar, baz FROM foo WHERE foo < $1 AND foo > $2', [3, 0]);

my $select-simple8 = $abstract.select('foo', <bar baz>, { :foo(\'NOW()') });
is-deeply $select-simple8, ('SELECT bar, baz FROM foo WHERE foo = NOW()', []);

my $select-type1 = $abstract.select('foo', <bar baz>, { :foo });
is-deeply $select-type1, ('SELECT bar, baz FROM foo WHERE foo = $1', [ True ]);

my $now = DateTime.now;
my $select-type2 = $abstract.select('foo', <bar baz>, { :foo('<' => $now) });
is-deeply $select-type2, ('SELECT bar, baz FROM foo WHERE foo < $1', [ $now ]);

my $select-type3 = $abstract.select('foo', <bar baz>, { :foo(1..42) });
is-deeply $select-type3, ('SELECT bar, baz FROM foo WHERE foo BETWEEN $1 AND $2', [ 1, 42 ]);


my $select-rename1 = $abstract.select('foo', (:bar<baz>), { :foo('<' => 3) });
is-deeply $select-rename1, ('SELECT bar AS baz FROM foo WHERE foo < $1', [3]);

my $select-rename2 = $abstract.select('foo', { :bar<baz> }, { :foo('<' => 3) });
is-deeply $select-rename2, ('SELECT bar AS baz FROM foo WHERE foo < $1', [3]);

my $select-rename3 = $abstract.select((:foo<quz>), <bar baz>, { :foo(Any) });
is-deeply $select-rename3, ('SELECT bar, baz FROM foo AS quz WHERE foo IS NULL', []);


my $select-junction1 = $abstract.select('foo', <bar baz>, { :foo(1|2|4) });
is-deeply $select-junction1, ('SELECT bar, baz FROM foo WHERE foo IN ($1, $2, $3)', [1, 2, 4]);

my $select-junction2 = $abstract.select('foo', <bar baz>, { :foo(none(1, 2, 4)) });
is-deeply $select-junction2, ('SELECT bar, baz FROM foo WHERE foo NOT IN ($1, $2, $3)', [1, 2, 4]);

my $select-junction3 = $abstract.select('foo', <bar baz>, { :foo(any('=' => 1, '=' => 2, '=' => 4)) });
is-deeply $select-junction3, ('SELECT bar, baz FROM foo WHERE foo IN ($1, $2, $3)', [1, 2, 4]);

my $select-junction4 = $abstract.select('foo', <bar baz>, { :foo(none('=' => 1, '=' => 2, '=' => 4)) });
is-deeply $select-junction4, ('SELECT bar, baz FROM foo WHERE foo NOT IN ($1, $2, $3)', [1, 2, 4]);

my $select-junction5 = $abstract.select('foo', <bar baz>, { :foo(any('=' => 1, '>' => 4)) });
is-deeply $select-junction5, ('SELECT bar, baz FROM foo WHERE foo = $1 OR foo > $2', [1, 4]);

my $select-junction6 = $abstract.select('foo', <bar baz>, { :foo(none('<' => 1, '>' => 2)) });
is-deeply $select-junction6, ('SELECT bar, baz FROM foo WHERE foo >= $1 AND foo <= $2', [1, 2]);

my $select-junction7 = $abstract.select('foo', <bar baz>, { :foo(none(1..42, Empty)) });
is-deeply $select-junction7, ('SELECT bar, baz FROM foo WHERE foo NOT BETWEEN $1 AND $2', [1, 42]);


my $select-named1 = $abstract.select('foo', <bar baz>, { :1foo }, :order-by<bar>);
is-deeply $select-named1, ('SELECT bar, baz FROM foo WHERE foo = $1 ORDER BY bar', [1]);

my $select-named2 = $abstract.select('foo', <bar baz>, { :1foo }, :5limit);
is-deeply $select-named2, ('SELECT bar, baz FROM foo WHERE foo = $1 LIMIT 5', [1]);

my $select-named3 = $abstract.select('foo', <bar baz>, { :1foo }, :5limit, :10offset);
is-deeply $select-named3, ('SELECT bar, baz FROM foo WHERE foo = $1 LIMIT 5 OFFSET 10', [1]);

my $select-named4 = $abstract.select('foo', <bar baz>, { :1foo }, :distinct);
is-deeply $select-named4, ('SELECT DISTINCT bar, baz FROM foo WHERE foo = $1', [1]);


my $join1 = SQL::Abstract::Join.new('foo', 'quz', :using<qaz>);
my $select-join1 = $abstract.select($join1, <bar baz>, { :1foo });
is-deeply $select-join1, ('SELECT bar, baz FROM foo INNER JOIN quz USING (qaz) WHERE foo = $1', [1]);

my $join2 = SQL::Abstract::Join.new('foo', 'quz', :on('foo.baz' => <quz baz_id>));
my $select-join2 = $abstract.select($join2, <bar baz>, { :1foo });
is-deeply $select-join2, ('SELECT bar, baz FROM foo INNER JOIN quz ON foo.baz = quz.baz_id WHERE foo = $1', [1]);


my $select-groupby1 = $abstract.select('foo', <bar baz>, { :1foo }, :group-by<bar>);
is-deeply $select-groupby1, ('SELECT bar, baz FROM foo WHERE foo = $1 GROUP BY bar', [1]);

my $select-groupby2 = $abstract.select('foo', <bar baz>, { :1foo }, :group-by<bar>, :having({:baz('>' => 15)}));
is-deeply $select-groupby2, ('SELECT bar, baz FROM foo WHERE foo = $1 GROUP BY bar HAVING baz > $2', [1, 15]);

my $select-groupby3 = $abstract.select('foo', ('bar', { :count(*) } => 'number'), { :1foo }, :group-by<bar>);
is-deeply $select-groupby3, ('SELECT bar, COUNT(*) AS number FROM foo WHERE foo = $1 GROUP BY bar', [1]);


my $select-locking1 = $abstract.select('foo', <bar baz>, { :1foo }, :locking<update>);
is-deeply $select-locking1, ('SELECT bar, baz FROM foo WHERE foo = $1 FOR UPDATE', [1]);

my $select-locking2 = $abstract.select('foo', <bar baz>, { :1foo }, :locking(:update<foo>));
is-deeply $select-locking2, ('SELECT bar, baz FROM foo WHERE foo = $1 FOR UPDATE OF foo', [1]);


my $insert1 = $abstract.insert('foo', { bar => 1, baz => 43 });
is-deeply $insert1, ('INSERT INTO foo (bar, baz) VALUES ($1, $2)', [1, 43]);

my $insert2 = $abstract.insert('foo', <bar baz>, [ [ 1, 42 ], ]);
is-deeply $insert2, ('INSERT INTO foo (bar, baz) VALUES ($1, $2)', [1, 42]);

my $insert3 = $abstract.insert('foo', <bar baz>, [ [ 1, 42 ], [2, 43] ]);
is-deeply $insert3, ('INSERT INTO foo (bar, baz) VALUES ($1, $2), ($3, $4)', [1, 42, 2, 43]);

my $insert4 = $abstract.insert('foo', { bar => 1, baz => 42 }, :returning<bar baz>);
is-deeply $insert4, ('INSERT INTO foo (bar, baz) VALUES ($1, $2) RETURNING bar, baz', [1, 42]);


my $update1 = $abstract.update('foo', { bar => 1, baz => 42 });
is-deeply $update1, ('UPDATE foo SET bar = $1, baz = $2', [1, 42]);

my $update2 = $abstract.update('foo', { bar => 1, baz => 42 }, { quz => 13 });
is-deeply $update2, ('UPDATE foo SET bar = $1, baz = $2 WHERE quz = $3', [1, 42, 13]);

my $update3 = $abstract.update('foo', { bar => 1, baz => 42 }, { quz => 13 }, :returning<bar baz>);
is-deeply $update3, ('UPDATE foo SET bar = $1, baz = $2 WHERE quz = $3 RETURNING bar, baz', [1, 42, 13]);

my $update4 = $abstract.update('foo', { bar => \('bar + 1'), baz => 42 }, { quz => 13 });
is-deeply $update4, ('UPDATE foo SET bar = bar + 1, baz = $1 WHERE quz = $2', [42, 13]);

my $update5 = $abstract.update('foo', { bar => \('bar + $1', 1), baz => 42 }, { quz => 13 });
is-deeply $update5, ('UPDATE foo SET bar = bar + $1, baz = $2 WHERE quz = $3', [1, 42, 13]);


my $delete1 = $abstract.delete('foo', { :foo('<' => 3) });
is-deeply $delete1, ('DELETE FROM foo WHERE foo < $1', [3]);

my $delete2 = $abstract.delete('foo', { :foo('<' => 3) }, :returning<baz>);
is-deeply $delete2, ('DELETE FROM foo WHERE foo < $1 RETURNING baz', [3]);


done-testing;

