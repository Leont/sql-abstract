use Test;
use SQL::Abstract;

my $abstract = SQL::Abstract.new;

my $select-simple1 = $abstract.select('foo');
is-deeply $select-simple1, ('SELECT * FROM foo', []);

my $select-simple2 = $abstract.select('foo', <bar baz>);
is-deeply $select-simple2, ('SELECT bar, baz FROM foo', []);

my $select-simple3 = $abstract.select('foo', <bar baz>, { :1foo });
is-deeply $select-simple3, ('SELECT bar, baz FROM foo WHERE foo = $1', [1]);

my $select-simple4 = $abstract.select('foo', <bar baz>, { :foo(Any) });
is-deeply $select-simple4, ('SELECT bar, baz FROM foo WHERE foo IS NULL', []);

my $select-simple5 = $abstract.select('foo', <bar baz>, { :foo(:isnull) });
is-deeply $select-simple5, ('SELECT bar, baz FROM foo WHERE foo IS NULL', []);

my $select-simple6 = $abstract.select('foo', <bar baz>, { :foo('<' => 3) });
is-deeply $select-simple6, ('SELECT bar, baz FROM foo WHERE foo < $1', [3]);

my $select-junction1 = $abstract.select('foo', <bar baz>, { :foo(1|2|4) });
is-deeply $select-junction1, ('SELECT bar, baz FROM foo WHERE foo IN ($1, $2, $3)', [1, 2, 4]);

my $select-junction2 = $abstract.select('foo', <bar baz>, { :foo(none(1, 2, 4)) });
is-deeply $select-junction2, ('SELECT bar, baz FROM foo WHERE foo NOT IN ($1, $2, $3)', [1, 2, 4]);

my $select-named1 = $abstract.select('foo', <bar baz>, { :1foo }, :order-by<bar>);
is-deeply $select-named1, ('SELECT bar, baz FROM foo WHERE foo = $1 ORDER BY bar', [1]);

my $select-named2 = $abstract.select('foo', <bar baz>, { :1foo }, :5limit);
is-deeply $select-named2, ('SELECT bar, baz FROM foo WHERE foo = $1 LIMIT 5', [1]);

my $select-named3 = $abstract.select('foo', <bar baz>, { :1foo }, :5limit, :10offset);
is-deeply $select-named3, ('SELECT bar, baz FROM foo WHERE foo = $1 LIMIT 5 OFFSET 10', [1]);

my $join1 = SQL::Abstract::Join.new('foo', 'quz', :using<qaz>);
my $select-join1 = $abstract.select($join1, <bar baz>, { :1foo });
is-deeply $select-join1, ('SELECT bar, baz FROM foo INNER JOIN quz USING (qaz) WHERE foo = $1', [1]);

my $join-expression2 = SQL::Abstract::Op::Equals.new(SQL::Abstract::Column::Named.new('foo.baz'), SQL::Abstract::Column::Named.new(<quz baz_id>));
my $join2 = SQL::Abstract::Join.new('foo', 'quz', :on($join-expression2));
my $select-join2 = $abstract.select($join2, <bar baz>, { :1foo });
is-deeply $select-join2, ('SELECT bar, baz FROM foo INNER JOIN quz ON foo.baz = quz.baz_id WHERE foo = $1', [1]);

my $select-groupby1 = $abstract.select('foo', <bar baz>, { :1foo }, :group-by<bar>);
is-deeply $select-groupby1, ('SELECT bar, baz FROM foo WHERE foo = $1 GROUP BY bar', [1]);

my $select-groupby2 = $abstract.select('foo', <bar baz>, { :1foo }, :group-by<bar>, :having({:baz('>' => 15)}));
is-deeply $select-groupby2, ('SELECT bar, baz FROM foo WHERE foo = $1 GROUP BY bar HAVING baz > $2', [1, 15]);

my $insert1 = $abstract.insert('foo', { bar => 1, baz => 42 });
is-deeply $insert1, ('INSERT INTO foo (bar, baz) VALUES ($1, $2)', [1, 42]);

my $insert2 = $abstract.insert('foo', <bar baz>, [ [ 1, 42 ], [2, 43] ]);
is-deeply $insert2, ('INSERT INTO foo (bar, baz) VALUES ($1, $2), ($3, $4)', [1, 42, 2, 43]);

my $insert3 = $abstract.insert('foo', { bar => 1, baz => 42 }, :returning<bar baz>);
is-deeply $insert3, ('INSERT INTO foo (bar, baz) VALUES ($1, $2) RETURNING bar, baz', [1, 42]);

my $update1 = $abstract.update('foo', { bar => 1, baz => 42 });
is-deeply $update1, ('UPDATE foo SET bar = $1, baz = $2', [1, 42]);

my $update2 = $abstract.update('foo', { bar => 1, baz => 42 }, { quz => 13 });
is-deeply $update2, ('UPDATE foo SET bar = $1, baz = $2 WHERE quz = $3', [1, 42, 13]);

my $update3 = $abstract.update('foo', { bar => 1, baz => 42 }, { quz => 13 }, :returning<bar baz>);
is-deeply $update3, ('UPDATE foo SET bar = $1, baz = $2 WHERE quz = $3 RETURNING bar, baz', [1, 42, 13]);

my $update4 = $abstract.update('foo', { bar => \('bar + 1'), baz => 42 }, { quz => 13 });
is-deeply $update4, ('UPDATE foo SET bar = bar + 1, baz = $1 WHERE quz = $2', [42, 13]);

my $update5 = $abstract.update('foo', { bar => \('bar + $1', 1), baz => 42 }, { quz => 13 });
is-deeply $update5, ('UPDATE foo SET bar = bar + $1, baz = $2 WHERE quz = $3', [1, 42, 13]);

my $delete1 = $abstract.delete('foo', { :foo('<' => 3) });
is-deeply $delete1, ('DELETE FROM foo WHERE foo < $1', [3]);

my $delete2 = $abstract.delete('foo', { :foo('<' => 3) }, :returning<baz>);
is-deeply $delete2, ('DELETE FROM foo WHERE foo < $1 RETURNING baz', [3]);

done-testing;

